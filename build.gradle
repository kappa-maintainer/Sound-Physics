buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
		classpath "org.spongepowered:mixingradle:0.7.38"
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = "${mc_version}-${mod_version}"
group = "com.sonicether.soundphysics"
archivesBaseName = "Sound-Physics"



sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {

	mappings channel: "stable", version: "39-1.12"

	accessTransformer = file('src/main/resources/META-INF/soundphysics_at.cfg')

	legacy {
		fixClasspath = true
		extractMappings = true
		attachMappings = true
	}

	runs {
		client {
			workingDirectory project.file('run/client')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

		}

		server {
			workingDirectory project.file('run/server')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url = 'https://maven.minecraftforge.net'
	}
	maven {
		url = 'https://repo.cleanroommc.com/releases'
	}
	maven {
		url = 'https://maven.outlands.top/releases'
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	flatDir {
		dirs 'libs'
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"

	annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
	annotationProcessor 'com.google.guava:guava:32.1.2-jre'
	annotationProcessor 'com.google.code.gson:gson:2.8.9'

	annotationProcessor ("zone.rong:mixinbooter:10.2") {
		transitive = false
	}

	implementation ("zone.rong:mixinbooter:10.2") {
		transitive = false
	}
	
	runtimeOnly ("zone.rong:mixinbooter:10.2") {
		transitive = false
	}

	compileOnly "curse.maven:glibyvc-296045:3882806" //Gliby's Voice Chat Reloaded
	compileOnly fg.deobf("curse.maven:umc-371784:4975229") //Immersive Railroading
	compileOnly "curse.maven:dynsur-238891:2922489" //Dynamic Surroundings
	//compileOnly "curse.maven:midnight-304881:2727758" //The Midnight
	compileOnly "mush:themidnight:0.3.5"
	compileOnly fg.deobf("curse.maven:ic2exp-242638:3838713") //IC2 EXP
	compileOnly fg.deobf("curse.maven:ic2c-242942:4476676") //IC2 Classic
	compileOnly "stub:Computronics:1.12.2-1.6.6:deobf" // Computronics

}

jar {
	manifest {
		attributes 'FMLCorePlugin': 'com.sonicether.soundphysics.CoreModLoader'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
		attributes 'FMLAT': 'soundphysics_at.cfg'
	}
}

mixin {add sourceSets.main, "soundphysics.mixins.refmap.json"}

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", mod_version
	inputs.property "mc_version", mc_version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':mod_version, 'mc_version':mc_version
	}

	// copy everything else except the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}
